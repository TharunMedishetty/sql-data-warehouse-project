/*
===============================================================================
EDA Script: Analysing the Gold Tables
===============================================================================
Script Purpose: This script explores the database and its tables while also analyzing dimension and measure columns. 
				It includes **magnitude analysis** for dimension columns and **ranking analysis** for measure columns to gain deeper insights into the data.
===============================================================================
*/

USE DataWarehouse

--===================================
---->>> Database Exploration <<<----
--===================================

-- Explore All objects in the Database

SELECT * FROM INFORMATION_SCHEMA.TABLES

-- Explore All columns in the table

SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'fact_sales' 

--===================================
---->>> Dimension Exploration <<<----
--===================================

-- Explore All Countries our customers come from.

SELECT DISTINCT country FROM gold.dim_customers_tb
ORDER BY 1

-- Explore All Categories "The Major Divisions"

SELECT DISTINCT category, subcategory, product_name FROM gold.dim_products_tb
ORDER BY 1,2,3

--===================================
---->>> Date Exploration <<<----
--===================================

-- Find the date of the first and last order

SELECT 
MIN(order_date) AS first_order_date ,
MAX(order_date) AS last_order_date
FROM gold.fact_sales_tb

-- How many years of sales are available

SELECT
MIN(order_date) AS first_order_date ,
MAX(order_date) AS last_order_date,
DATEDIFF(MONTH,MIN(order_date), MAX(order_date)) AS order_range_months
FROM gold.fact_sales_tb

-- Find the youngest and oldest customer

SELECT
MIN(birthdate) AS oldest_birthdate,
DATEDIFF(YEAR, MIN(birthdate), GETDATE() ) AS oldest_age,
MAX(birthdate) AS youngest_birthdate,
DATEDIFF(YEAR, MAX(birthdate), GETDATE() ) AS youngest_age
FROM
gold.dim_customers_tb

--===================================
---->>> Measures Exploration <<<----
--===================================

-- Find the total sales
SELECT SUM(sales_amount) AS total_sales FROM gold.fact_sales_tb

-- Find how many iterms are sold
SELECT SUM(quantity) AS toatl_quantity FROM gold.fact_sales_tb

-- Find the average selling price
SELECT AVG(price) AS avg_price FROM gold.fact_sales_tb

-- Find the total no of orders
SELECT COUNT( DISTINCT order_number) AS total_orders FROM gold.fact_sales_tb

-- Find the total no of products
SELECT COUNT(product_key) AS total_products FROM gold.dim_products_tb

-- Find the total no of customers
SELECT COUNT(customer_key) AS total_customers FROM gold.dim_customers_tb

-- Find the total no of customers that has placed an order

SELECT COUNT( DISTINCT customer_key) FROM gold.fact_sales_tb 


-- Generate a report that shows all key metrics of the business

SELECT 'total_sales' AS measure_name, SUM(sales_amount) AS measure_value FROM gold.fact_sales_tb
UNION ALL
SELECT 'toatl_quantity' AS measure_name, SUM(quantity) AS measure_value FROM gold.fact_sales_tb
UNION ALL
SELECT 'avg_price' AS measure_name, AVG(price) AS measure_value FROM gold.fact_sales_tb
UNION ALL
SELECT 'total_no_of_orders' AS measure_name, COUNT( DISTINCT order_number) AS measure_value FROM gold.fact_sales_tb
UNION ALL
SELECT 'total_no_of_products' AS measure_name, COUNT(product_key) AS measure_value FROM gold.dim_products_tb
UNION ALL
SELECT 'total_no_of_customers' AS measure_name, COUNT(customer_key) AS measure_value FROM gold.dim_customers_tb

--===================================
---->>> Magnitude Analysis <<<----
--===================================

--Find the total customers by countries
SELECT
country,
COUNT(customer_key) AS total_customers
FROM gold.dim_customers_tb
GROUP BY country
ORDER BY total_customers DESC

--Find the total customers by countries 
SELECT 
gender,
COUNT(customer_key) AS total_customers
FROM gold.dim_customers_tb
GROUP BY gender
ORDER BY total_customers DESC

--Find the total products by category 

SELECT
category,
COUNT(product_key) AS total_products
FROM gold.dim_products_tb
GROUP BY category
ORDER BY total_products DESC

--Find the average costs in each category 
SELECT
category,
AVG(cost) AS avg_cost
FROM gold.dim_products_tb
GROUP BY category
ORDER BY avg_cost DESC

--Find the total revenue generated for each category 
SELECT
p.category,
SUM(f.sales_amount) AS total_revenue
FROM      gold.fact_sales_tb f
LEFT JOIN gold.dim_products_tb p  ---usually, we will take fact table first then left join with dim table
ON        f.product_key = p.product_key
GROUP BY p.category
ORDER BY total_revenue DESC

--Find the total revenue generated by each customer
SELECT
CONCAT(c.first_name,' ',c.last_name) AS customer_name,
SUM(f.sales_amount) AS total_revenue
FROM      gold.fact_sales_tb f
LEFT JOIN gold.dim_customers_tb c
ON		  f.customer_key = c.customer_key
GROUP BY CONCAT(c.first_name,' ',c.last_name)
ORDER BY total_revenue DESC

-- What is the distribution of sold items across countries
SELECT
c.country ,
SUM(f.quantity) AS total_sold_items
FROM      gold.fact_sales_tb f
LEFT JOIN gold.dim_customers_tb c
ON		  f.customer_key = c.customer_key
GROUP BY c.country
ORDER BY total_sold_items DESC


--===================================
---->>> Rank Analysis <<<----
--===================================

-- which 5 products generate the highest revenue
SELECT TOP 5
p.product_name,
SUM(f.sales_amount) AS total_revenue
FROM		gold.fact_sales_tb f
LEFT JOIN   gold.dim_products_tb p
ON          f.product_key = p.product_key
GROUP BY p.product_name
ORDER BY total_revenue DESC

----
SELECT *
FROM (
	SELECT 
	p.product_name,
	SUM(f.sales_amount) AS total_revenue,
	DENSE_RANK() OVER(ORDER BY SUM(f.sales_amount) DESC) AS rank_products
	FROM		gold.fact_sales_tb f
	LEFT JOIN   gold.dim_products_tb p
	ON          f.product_key = p.product_key
	GROUP BY p.product_name) t
WHERE rank_products <= 5


-- what are the worst-performing products in terms of sales

SELECT TOP 5
p.product_name,
SUM(f.sales_amount) AS total_revenue
FROM		gold.fact_sales_tb f
LEFT JOIN   gold.dim_products_tb p
ON          f.product_key = p.product_key
GROUP BY p.product_name
ORDER BY total_revenue 

-- The 3 customers with fewest orders

SELECT
*
FROM (
	SELECT
	f.customer_key,
	CONCAT(c.first_name,' ', c.last_name) AS customer_name,
	COUNT(DISTINCT f.order_number) AS total_orders,
	DENSE_RANK() OVER (ORDER BY COUNT(f.order_number) ) AS rank_orders
	FROM      gold.fact_sales_tb f
	LEFT JOIN gold.dim_customers_tb c
	ON f.customer_key = c.customer_key
	GROUP BY f.customer_key,CONCAT(c.first_name,' ', c.last_name) ) t
WHERE rank_orders <= 3
